Python core syntax

    This is Python core syntax – an ability to perform specific operations on different data types, when operations are formulated using the same operators or instructions, or even functions.

    Python core syntax covers:

        operators like '+', '-', '*', '/', '%' and many others;
        operators like '==', '<', '>', '<=', 'in' and many others;
        indexing, slicing, subscripting;
        built-in functions like str(), len()
        reflexion – isinstance(), issubclass()

    __init__() > __ can be called as doble underscore or dunder

    Example of magic method to sum classes:
        def __add__(self, other):
            return self.value + other.value
    
    List of all magic methods:

        Comparison methods
            Function or operator	Magic method	Implementation meaning or purpose
            ==	__eq__(self, other)	equality operator
            !=	__ne__(self, other)	inequality operator
            <	__lt__(self, other)	less-than operator
            >	__gt__(self, other)	greater-than operator
            <=	__le__(self, other)	less-than-or-equal-to operator
            >=	__ge__(self, other)	greater-than-or-equal-to operator

        Numeric methods

            Unary operators and functions
                Function or operator	Magic method	Implementation meaning or purpose
                +	__pos__(self)	unary positive, like a = +b
                -	__neg__(self)	unary negative, like a = -b
                abs()	__abs__(self)	behavior for abs() function
                round(a, b)	__round__(self, b)	behavior for round() function

            Common, binary operators and functions
                Function or operator	Magic method	Implementation meaning or purpose
                +	__add__(self, other)	addition operator
                -	__sub__(self, other)	subtraction operator
                *	__mul__(self, other)	multiplication operator
                //	__floordiv__(self, other)	integer division operator
                /	__div__(self, other)	division operator
                %	__mod__(self, other)	modulo operator
                **	__pow__(self, other)	exponential (power) operator
            
        Augmented operators and functions
        By augmented assignment we should understand a sequence of unary operators and assignments like a += 20

            Function or operator	Magic method	Implementation meaning or purpose
            +=	__iadd__(self, other)	addition and assignment operator
            -=	__isub__(self, other)	subtraction and assignment operator
            *=	__imul__(self, other)	multiplication and assignment operator
            //=	__ifloordiv__(self, other)	integer division and assignment operator
            /=	__idiv__(self, other)	division and assignment operator
            %=	__imod__(self, other)	modulo and assignment operator
            **=	__ipow__(self, other)	exponential (power) and assignment operator


    TIP: You can use dir() and help() functions to see the magic methods of a class and its documentation.