This chapter assumes that you are familiar with the basics of OOP, so to establish an understanding of common terms, we should agree on the following definitions:

    class — an idea, blueprint, or recipe for an instance;
        Your classes could be used as superclasses for newly derived classes (subclasses).

    instance — an instantiation of the class; very often used interchangeably with the term 'object';
    object — Python's representation of data and methods; objects could be aggregates of instances;
        instance + object
            class | 1 --> * | instance/object
            Individual state (expressed as variables, so objects again) and shares its behavior (expressed as methods, so objects again).

    attribute — any object or class trait; could be a variable or method;
        variables — Containing information about the class itself or a class instance; classes and class instances can own many 
        variables;
            variables can be created and updated inside and outside of the class:
                class Duck:
                    def __init__(self):
                        self.color = 'white'
                a = Duck()
                a.another_color = 'black'
                print(a.__dict__)  # {'color': 'white', 'another_color': 'black'}

            Types of variables:
                class — variables that are shared by all instances of a class;
                    when using __dict__ attribute on the object the class variable will not been seen because the class variable is stored in the class namespace, not the object namespace.
                    if you edit the class variable throw the object instead of the class you will create a new instance variable (instead of editing the class variable)
                instance — variables that are unique to each instance of a class;
            Class attributes are most often addressed with 'dot' notation, i.e., <class>dot<attribute>. The other way to access attributes (variables) it to use the getattr() and setattr() functions.
        method — a function built into a class that is executed on behalf of the class or object; some say that it’s a 'callable attribute';
            It is said that methods are the 'callable attributes' of Python objects. By 'callable' we should understand anything that can be called; such objects allow you to use round parentheses () and eventually pass some parameters, just like functions.

    type — refers to the class that was used to instantiate the object.
        Information about an object’s class is contained in __class__.
        Creating a new class creates a new type of object, allowing new instances of that type to be made.
            class Duck:
                def __init__(self):
                    self.color = 'white'

                def 
            duckling = Duck()

            print(Duck.__class__)  # <class 'type'>
            print(duckling.__class__)  # <class '__main__.Duck'>
            print(duckling.color.__class__)  # <class 'str'>
            print(duckling.quack.__class__)  # <class 'method'>


¡¡Now that we’re starting to discuss more advanced OOP topics, it’s important to remember that in Python everything is an object (functions, modules, lists, etc.). In the very last section of this module, you'll see that even classes are instances.!!

